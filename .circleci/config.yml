version: 2.1

jobs:
  lint-frontend:
    docker:
      - image: circleci/node:14
    working_directory: /tmp/workspace
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: lint front-end
          command: |
            cd frontend/headliner
            npm i
            npx eslint src
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-build

  lint-backend:
    docker:
      - image: python:3.8
    working_directory: /tmp/workspace
    steps:
      - checkout
      - run:
          name: lint backend
          command: |
            cd backend
            pip install -r requirements.txt
            pylint headliner

  test-frontend:
    docker:
      - image: circleci/node:14
    working_directory: /tmp/workspace
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Front-end test
          command: |
            cd frontend/headliner
            npm i
            npm run test
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-build

  test-backend:
    docker:
      - image: python:3.8
    working_directory: /tmp/workspace
    steps:
      - checkout
      - run:
          name: test backend
          command: |
            cd backend
            pip install -r requirements.txt
            pytest headliner/api/news/tests.py


  build-push-docker-images:
    machine: true
    working_directory: /tmp/workspace
    steps:
      - checkout
      - run:
          name: build images
          command: |
            docker-compose build
      - run:
          name: push to docker hub
          command: |
            docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
            docker push mraarif/capstone-backend
            docker push mraarif/capstone-celery
            docker push mraarif/capstone-celery-beat

  create-kubernetes-cluster:
    docker:
      - image: alpine/k8s:1.15.12
    working_directory: /tmp/workspace
    steps:
      - checkout
      - run:
          name: store old cluster name
          command: |
            echo $(aws eks list-clusters | python3 -c "import sys, json; print(json.load(sys.stdin)['clusters'][0])") > cluster.txt

      - run:
          name: create kubernetes cluster
          command: |
            # using cli to be able to specify unique name for cluster
            eksctl create cluster --name="capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
            --nodes-min=6 --nodes-max=8 \
            --node-type=t3.medium

      - run:
          name: create kubernetes resources
          command: |
            aws eks update-kubeconfig --name "capstone-${CIRCLE_WORKFLOW_ID:0:7}"
            export KUBECONFIG=/root/.kube/config
            cd deploy
            kubectl apply -f dev-secrets.yaml

            kubectl apply -f redis/
            kubectl rollout status deployment redis

            kubectl apply -f db/
            kubectl rollout status deployment postgres

            kubectl apply -f backend/
            kubectl rollout status deployment backend

            kubectl apply -f celery/
            kubectl rollout status deployment celery-worker
            kubectl rollout status deployment celery-beat

      - run:
          name: add backend service ip to a file
          command: |
            echo "$(kubectl get services backend-service --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')" > backend-service.txt
            cat backend-service.txt

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - backend-service.txt
            - kubeconfig/kube_config.yaml
            - cluster.txt

  build-push-frontend-image:
    machine: true
    working_directory: /tmp/workspace
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: build image
          command: |
            docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
            ls
            cat backend-service.txt
            export BACKEND_IP=$(tr -d '\n' < backend-service.txt)
            echo $BACKEND_IP
            docker-compose build frontend
            docker push mraarif/capstone-frontend

  deploy-frontend-to-cluster:
    docker:
      - image: alpine/k8s:1.15.12
    working_directory: /tmp/workspace
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: update kubernetes cluster resources
          command: |
            aws eks update-kubeconfig --name capstone-cluster
            export KUBECONFIG=/root/.kube/config
            cd deploy

            kubectl apply -f frontend/
            kubectl rollout status deployment frontend


  smoke-test:
    docker:
      - image: alpine/k8s:1.15.12
    working_directory: /tmp/workspace
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: smoke test frontend and backend services
          command: |
            aws eks update-kubeconfig --name capstone-cluster
            export KUBECONFIG=/root/.kube/config
            echo "$(kubectl get services backend-service --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')" > backend-service.txt
            echo "$(kubectl get services frontend-service --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')" > frontend-service.txt
            BACKEND_IP=$(tr -d '\n' < backend-service.txt)
            FRONTEND_IP=$(tr -d '\n' < frontend-service.txt)
            echo $BACKEND_IP
            echo $FRONTEND_IP
            echo "http://${BACKEND_IP}:8000"
            echo "http://${FRONTEND_IP}:3000"

            curl -m 10 "http://${BACKEND_IP}:8000"
            curl -m 10 "http://${FRONTEND_IP}:3000"

  delete-old-cluster:
    docker:
      - image: alpine/k8s:1.15.12
    working_directory: /tmp/workspace
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: delete old clusters
          command: |
            aws eks update-kubeconfig --name capstone-cluster
            export KUBECONFIG=/root/.kube/config

            cluster_name=$(tr -d '\n' < cluster.txt)
            eksctl delete cluster --name=$cluster_name


workflows:
  default:
    jobs:
      - lint-frontend
      - lint-backend
      - test-frontend:
          requires: [ lint-frontend ]
      - test-backend:
          requires: [ lint-backend ]

      - build-push-docker-images:
          requires: [ test-frontend, test-backend ]
          filters:
            branches:
              only:
                - main

      - create-kubernetes-cluster:
          requires: [ build-push-docker-images ]

      - build-push-frontend-image:
          requires: [ create-kubernetes-cluster ]

      - deploy-frontend-to-cluster:
          requires: [ build-push-frontend-image ]

      - smoke-test:
          requires: [ deploy-frontend-to-cluster ]

      - delete-old-cluster:
          requires: [ smoke-test ]
